rules_version = "2";

service cloud.firestore {
  match /databases/{database}/documents {

    // secure by default
    match /{document=**} {
      allow read, write: if false;
    }


    // Reusable functions
    // //////////////////

    function isSignedIn() {
      return request.auth != null;
    }

    // determine document ownership
    function isOwner(uid) {
      return isSignedIn() && request.auth.uid == uid;
    }

    // determine claim
    function isClaim(claim) {
      return request.auth.token[claim] == true;
    }

    function documentFieldsCheckOut(requiredFields, optionalFields) {
      let allFields = requiredFields.concat(optionalFields);
      return request.resource.data.keys().hasAll(requiredFields) &&
        request.resource.data.keys().hasOnly(allFields);
    }

    function editOnlyChangesFields(allowedFields) {
      let affectedKeys = request.resource.data.diff(resource.data).affectedKeys();
      return affectedKeys.hasOnly(allowedFields);
    }

    function isPublic() {
      return 'status' in resource.data && resource.data.status == 'public';
    }

    function updatesToPublic() {
      return 'status' in request.resource.data && request.resource.data.status == 'public';
    }

    function priceValid(data) {
      return 'price' in data
      && data.price.keys().hasAll(['currency', 'display'])
      && data.price.currency != null
      && data.price.display != null;
    }

    function jointResourcesCheckout(requiredFields){
      return resource.data.keys()
        .concat(request.resource.data.keys())
        .hasAll(requiredFields);
    }

    function isStatusRequest() { return 'status' in request.resource.data }
    function isPublishRequest() { return request.resource.data.status == 'public' }
    function isValidPublishRequest() {
      return
        jointResourcesCheckout(['title', 'description', 'owner', 'price'])
        && (priceValid(resource.data) || priceValid(request.resource.data));
    }
    // //////////////////

		match /sessions/{session} {
      allow read: if isOwner(resource.data.owner.uid) || (resource.data.status == 'public');
      allow create: if isClaim('isTeacher') && request.resource.data.owner.uid == request.auth.uid &&
        documentFieldsCheckOut(
          ['title', 'owner'],
          ['description', 'type', 'format', 'thumbRef', 'level', 'price', 'activities', 'pillar', 'promo', 'relatedSessions', 'duration', 'when', 'eventId', 'resourceId']
        );

      allow update: if
        isOwner(resource.data.owner.uid)
        && (
          !isStatusRequest()
          || !isPublishRequest()
          || isValidPublishRequest()
        )
        && editOnlyChangesFields(['title', 'description', 'thumbRef', 'level', 'price', 'activities', 'pillar', 'promo', 'relatedSessions', 'duration', 'entryId', 'status']);

      allow delete: if isOwner(resource.data.owner.uid) && !isPublic();
    }

    match /users/{userId} {
      allow read: if isOwner(userId);
    }

  }
}
